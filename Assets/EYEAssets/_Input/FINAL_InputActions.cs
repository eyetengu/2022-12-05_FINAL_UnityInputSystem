//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/EYEAssets/_Input/FINAL_InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FINAL_InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FINAL_InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FINAL_InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9e83693b-3944-4ddd-a228-8fc40049fc92"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b454bba1-6d5d-4d69-9e16-577aee249cf0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ff05ffa7-47c3-4aa9-a3a1-cddaed0d6896"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""8ee70613-b905-43be-92d3-75c0dcbf51dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""e83d6af2-1d22-4996-9b78-f96be08c2a68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a9ddc0af-fcae-4017-bef4-6cfce06f4aca"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""e7790e49-0a7f-43d3-b447-08eab9c4aec9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""8e4bac6a-2415-47db-9072-89ae7b02d800"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ccad6d3a-5892-4a83-baa5-81dc16045795"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e98bb33-71f9-4c21-a67b-c4ce89905e80"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""672f738f-9e63-4004-9871-3e4726da6782"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8211e966-7814-4eae-abc7-b9f33ed89dd2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""82ebad4d-ff85-427c-b2f0-901c36ef8f9b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""a42966f7-9301-40b9-8eb2-5a79eb9ecb58"",
            ""actions"": [
                {
                    ""name"": ""Ascend/Descend"",
                    ""type"": ""Value"",
                    ""id"": ""2e340eae-cfb6-4ab4-880d-821007ae6144"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""a6a9a130-e071-40b0-b9ed-6a8fe18fb334"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tilt"",
                    ""type"": ""Value"",
                    ""id"": ""460ae1f5-0004-4bfe-aedd-d60fe1d656b7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ExitFlyingMode"",
                    ""type"": ""Button"",
                    ""id"": ""71104335-f76c-4d7e-a00b-fb87b3423eee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5e1ddf85-e4a7-40bb-9e18-4b4b9b0e2d6d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""53117850-ea7a-4abe-b9e0-5ae708406222"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""130bcd3e-5b24-4eff-a522-436131e0ae43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f7f9804e-c95d-4b48-9f13-1c5e45a0714c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""40832ee6-91fe-4024-9664-42259d60e008"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a8c8285-1a08-4b43-8fbe-0eebb65edc89"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitFlyingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""30eee3a8-816d-4f6e-848c-478beb034983"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ascend/Descend"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""850abadd-7b0f-4b80-bde5-b26f71c74355"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ascend/Descend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3e04d556-1cb5-4ea2-a5ae-afc0a6c1db99"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ascend/Descend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4b396a33-9552-41b3-b905-a7e77c35e5e8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b150a8bc-3de8-4d9d-96c7-b537f93dc8f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2eee6ab5-f869-465b-b27e-df9ebd224fa5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Forklift"",
            ""id"": ""3169e3ca-5b2b-4903-b1cb-0abe5bca6aed"",
            ""actions"": [
                {
                    ""name"": ""Raise/Lower Forks"",
                    ""type"": ""Value"",
                    ""id"": ""01976b6f-7111-48a7-b27a-d99bf51c7fba"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drive"",
                    ""type"": ""Value"",
                    ""id"": ""251e7c12-500f-4d18-bd88-2286bd10af76"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Exit Driving"",
                    ""type"": ""Button"",
                    ""id"": ""4d147f9c-adb3-4dd2-83c7-0ab843ab8a7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""883c09f3-41d2-4ed2-aba8-f93d5b76760d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise/Lower Forks"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b551f997-0f9d-474f-ab72-b9f9ec9603cd"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise/Lower Forks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e3bc22d0-2f5d-4399-be36-9deab87e75c2"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise/Lower Forks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0d4ab14e-7647-43eb-8c33-d4674f889251"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e48bce45-c6dc-4406-92c2-5ec45e68c0d1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d7860cf8-f46c-4bc8-9ba9-c4cab38f88f4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aca5f332-0e5e-47ac-ae99-1931a2b64708"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8f1ff746-e3ad-4cb3-aec3-4c2657670b14"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""91d56874-a0d2-4b4a-bdbd-a1103267ac59"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit Driving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Laptop"",
            ""id"": ""135bef83-7177-45a0-bdc6-81e67277af00"",
            ""actions"": [
                {
                    ""name"": ""HackCameras"",
                    ""type"": ""Button"",
                    ""id"": ""6cc53cd1-4b9e-4415-8d32-9f30b96f0b59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit Hacking"",
                    ""type"": ""Button"",
                    ""id"": ""dfce6ac1-eebb-46bf-b1a0-6aa73a529224"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a0ee70a-2ecb-4aee-bb34-134060856772"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold(duration=5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HackCameras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c468d90-754d-4944-ba4a-714d7743127c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit Hacking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""5f5cda8a-2309-4595-841e-78162ec70b50"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""dd3d6a4c-b240-4938-adf7-d354e881c5c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressHoldInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""74612c0e-4c44-471a-a422-8d1f88b2e375"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""157771c8-402f-43d2-a958-6f34c989d224"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81fb6b96-f7da-42ea-ac5c-6d808342f0f8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressHoldInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Rotation = m_Player.FindAction("Rotation", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Action = m_Player.FindAction("Action", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_AscendDescend = m_Drone.FindAction("Ascend/Descend", throwIfNotFound: true);
        m_Drone_Rotate = m_Drone.FindAction("Rotate", throwIfNotFound: true);
        m_Drone_Tilt = m_Drone.FindAction("Tilt", throwIfNotFound: true);
        m_Drone_ExitFlyingMode = m_Drone.FindAction("ExitFlyingMode", throwIfNotFound: true);
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_RaiseLowerForks = m_Forklift.FindAction("Raise/Lower Forks", throwIfNotFound: true);
        m_Forklift_Drive = m_Forklift.FindAction("Drive", throwIfNotFound: true);
        m_Forklift_ExitDriving = m_Forklift.FindAction("Exit Driving", throwIfNotFound: true);
        // Laptop
        m_Laptop = asset.FindActionMap("Laptop", throwIfNotFound: true);
        m_Laptop_HackCameras = m_Laptop.FindAction("HackCameras", throwIfNotFound: true);
        m_Laptop_ExitHacking = m_Laptop.FindAction("Exit Hacking", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Interact = m_Interaction.FindAction("Interact", throwIfNotFound: true);
        m_Interaction_PressHoldInteraction = m_Interaction.FindAction("PressHoldInteraction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Rotation;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Action;
    public struct PlayerActions
    {
        private @FINAL_InputActions m_Wrapper;
        public PlayerActions(@FINAL_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Rotation => m_Wrapper.m_Player_Rotation;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Action => m_Wrapper.m_Player_Action;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Action.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_AscendDescend;
    private readonly InputAction m_Drone_Rotate;
    private readonly InputAction m_Drone_Tilt;
    private readonly InputAction m_Drone_ExitFlyingMode;
    public struct DroneActions
    {
        private @FINAL_InputActions m_Wrapper;
        public DroneActions(@FINAL_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @AscendDescend => m_Wrapper.m_Drone_AscendDescend;
        public InputAction @Rotate => m_Wrapper.m_Drone_Rotate;
        public InputAction @Tilt => m_Wrapper.m_Drone_Tilt;
        public InputAction @ExitFlyingMode => m_Wrapper.m_Drone_ExitFlyingMode;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @AscendDescend.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnAscendDescend;
                @AscendDescend.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnAscendDescend;
                @AscendDescend.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnAscendDescend;
                @Rotate.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Tilt.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @Tilt.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @Tilt.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @ExitFlyingMode.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnExitFlyingMode;
                @ExitFlyingMode.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnExitFlyingMode;
                @ExitFlyingMode.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnExitFlyingMode;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AscendDescend.started += instance.OnAscendDescend;
                @AscendDescend.performed += instance.OnAscendDescend;
                @AscendDescend.canceled += instance.OnAscendDescend;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Tilt.started += instance.OnTilt;
                @Tilt.performed += instance.OnTilt;
                @Tilt.canceled += instance.OnTilt;
                @ExitFlyingMode.started += instance.OnExitFlyingMode;
                @ExitFlyingMode.performed += instance.OnExitFlyingMode;
                @ExitFlyingMode.canceled += instance.OnExitFlyingMode;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_RaiseLowerForks;
    private readonly InputAction m_Forklift_Drive;
    private readonly InputAction m_Forklift_ExitDriving;
    public struct ForkliftActions
    {
        private @FINAL_InputActions m_Wrapper;
        public ForkliftActions(@FINAL_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RaiseLowerForks => m_Wrapper.m_Forklift_RaiseLowerForks;
        public InputAction @Drive => m_Wrapper.m_Forklift_Drive;
        public InputAction @ExitDriving => m_Wrapper.m_Forklift_ExitDriving;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @RaiseLowerForks.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLowerForks;
                @RaiseLowerForks.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLowerForks;
                @RaiseLowerForks.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLowerForks;
                @Drive.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnDrive;
                @Drive.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnDrive;
                @Drive.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnDrive;
                @ExitDriving.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnExitDriving;
                @ExitDriving.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnExitDriving;
                @ExitDriving.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnExitDriving;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RaiseLowerForks.started += instance.OnRaiseLowerForks;
                @RaiseLowerForks.performed += instance.OnRaiseLowerForks;
                @RaiseLowerForks.canceled += instance.OnRaiseLowerForks;
                @Drive.started += instance.OnDrive;
                @Drive.performed += instance.OnDrive;
                @Drive.canceled += instance.OnDrive;
                @ExitDriving.started += instance.OnExitDriving;
                @ExitDriving.performed += instance.OnExitDriving;
                @ExitDriving.canceled += instance.OnExitDriving;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);

    // Laptop
    private readonly InputActionMap m_Laptop;
    private ILaptopActions m_LaptopActionsCallbackInterface;
    private readonly InputAction m_Laptop_HackCameras;
    private readonly InputAction m_Laptop_ExitHacking;
    public struct LaptopActions
    {
        private @FINAL_InputActions m_Wrapper;
        public LaptopActions(@FINAL_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HackCameras => m_Wrapper.m_Laptop_HackCameras;
        public InputAction @ExitHacking => m_Wrapper.m_Laptop_ExitHacking;
        public InputActionMap Get() { return m_Wrapper.m_Laptop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LaptopActions set) { return set.Get(); }
        public void SetCallbacks(ILaptopActions instance)
        {
            if (m_Wrapper.m_LaptopActionsCallbackInterface != null)
            {
                @HackCameras.started -= m_Wrapper.m_LaptopActionsCallbackInterface.OnHackCameras;
                @HackCameras.performed -= m_Wrapper.m_LaptopActionsCallbackInterface.OnHackCameras;
                @HackCameras.canceled -= m_Wrapper.m_LaptopActionsCallbackInterface.OnHackCameras;
                @ExitHacking.started -= m_Wrapper.m_LaptopActionsCallbackInterface.OnExitHacking;
                @ExitHacking.performed -= m_Wrapper.m_LaptopActionsCallbackInterface.OnExitHacking;
                @ExitHacking.canceled -= m_Wrapper.m_LaptopActionsCallbackInterface.OnExitHacking;
            }
            m_Wrapper.m_LaptopActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HackCameras.started += instance.OnHackCameras;
                @HackCameras.performed += instance.OnHackCameras;
                @HackCameras.canceled += instance.OnHackCameras;
                @ExitHacking.started += instance.OnExitHacking;
                @ExitHacking.performed += instance.OnExitHacking;
                @ExitHacking.canceled += instance.OnExitHacking;
            }
        }
    }
    public LaptopActions @Laptop => new LaptopActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private IInteractionActions m_InteractionActionsCallbackInterface;
    private readonly InputAction m_Interaction_Interact;
    private readonly InputAction m_Interaction_PressHoldInteraction;
    public struct InteractionActions
    {
        private @FINAL_InputActions m_Wrapper;
        public InteractionActions(@FINAL_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interaction_Interact;
        public InputAction @PressHoldInteraction => m_Wrapper.m_Interaction_PressHoldInteraction;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @PressHoldInteraction.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPressHoldInteraction;
                @PressHoldInteraction.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPressHoldInteraction;
                @PressHoldInteraction.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPressHoldInteraction;
            }
            m_Wrapper.m_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @PressHoldInteraction.started += instance.OnPressHoldInteraction;
                @PressHoldInteraction.performed += instance.OnPressHoldInteraction;
                @PressHoldInteraction.canceled += instance.OnPressHoldInteraction;
            }
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnAscendDescend(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnTilt(InputAction.CallbackContext context);
        void OnExitFlyingMode(InputAction.CallbackContext context);
    }
    public interface IForkliftActions
    {
        void OnRaiseLowerForks(InputAction.CallbackContext context);
        void OnDrive(InputAction.CallbackContext context);
        void OnExitDriving(InputAction.CallbackContext context);
    }
    public interface ILaptopActions
    {
        void OnHackCameras(InputAction.CallbackContext context);
        void OnExitHacking(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnPressHoldInteraction(InputAction.CallbackContext context);
    }
}
