//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/EYEAssets/_Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""cc15ea8d-5261-4598-b8b6-635df290d2a1"",
            ""actions"": [
                {
                    ""name"": ""ChangeCubeColor"",
                    ""type"": ""Button"",
                    ""id"": ""dddb5deb-01fb-416e-8395-0390257b6827"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCube"",
                    ""type"": ""Button"",
                    ""id"": ""8e947566-16a4-4d43-b027-d2299fbcf05e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToDriving"",
                    ""type"": ""Button"",
                    ""id"": ""b2b3bbf8-c75a-4d3b-a1be-29f25dad9d70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ce9f573-5e89-4384-bb6b-03088e299567"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCubeColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""544e315b-26e4-4efa-b637-6a22fc16918b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCube"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0889e069-725e-40c4-b9dd-13847ca16c1f"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""RotateCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c3a016de-dfa0-45d5-b1aa-8ce3b0a7f25d"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""RotateCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a400f73b-37d3-4da8-98e0-06d2a4261e17"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToDriving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Driving"",
            ""id"": ""538bb00d-bcce-4e7f-a8c8-d1e1fe6f98e2"",
            ""actions"": [
                {
                    ""name"": ""DrivingCar"",
                    ""type"": ""Value"",
                    ""id"": ""b6d2c378-55b9-4a4f-a732-bd7765369455"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchToPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""7a87dc12-c2e8-4d7a-89c0-2855a25a094e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d1b181ad-9999-4d96-a678-9c35cb93aaca"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ab2b3f1c-9c30-486b-911e-0d3a1b6e8d02"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f651c574-3631-4bb4-aaf6-7d9aa81ec776"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1db8734e-3c58-469e-9db9-4f422b0f05e1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b686e2c6-1b32-4e4b-a302-5eeed2131d50"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0d952831-a0d6-4133-85d6-15221aefacae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""83bd2584-065f-42d5-9879-096261bc4e97"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2ed35a9-d0e8-4eac-ae80-55d555e8b713"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a38783c4-804a-4c2f-8594-d078a6cc399e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""95af7e30-843d-469b-b90b-3de9066f78d1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8c84a1bf-51af-4826-8626-679293191fea"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ChangeCubeColor = m_Player.FindAction("ChangeCubeColor", throwIfNotFound: true);
        m_Player_RotateCube = m_Player.FindAction("RotateCube", throwIfNotFound: true);
        m_Player_SwitchToDriving = m_Player.FindAction("SwitchToDriving", throwIfNotFound: true);
        // Driving
        m_Driving = asset.FindActionMap("Driving", throwIfNotFound: true);
        m_Driving_DrivingCar = m_Driving.FindAction("DrivingCar", throwIfNotFound: true);
        m_Driving_SwitchToPlayer = m_Driving.FindAction("SwitchToPlayer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_ChangeCubeColor;
    private readonly InputAction m_Player_RotateCube;
    private readonly InputAction m_Player_SwitchToDriving;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeCubeColor => m_Wrapper.m_Player_ChangeCubeColor;
        public InputAction @RotateCube => m_Wrapper.m_Player_RotateCube;
        public InputAction @SwitchToDriving => m_Wrapper.m_Player_SwitchToDriving;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @ChangeCubeColor.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeCubeColor;
                @ChangeCubeColor.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeCubeColor;
                @ChangeCubeColor.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeCubeColor;
                @RotateCube.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCube;
                @RotateCube.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCube;
                @RotateCube.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCube;
                @SwitchToDriving.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchToDriving;
                @SwitchToDriving.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchToDriving;
                @SwitchToDriving.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchToDriving;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeCubeColor.started += instance.OnChangeCubeColor;
                @ChangeCubeColor.performed += instance.OnChangeCubeColor;
                @ChangeCubeColor.canceled += instance.OnChangeCubeColor;
                @RotateCube.started += instance.OnRotateCube;
                @RotateCube.performed += instance.OnRotateCube;
                @RotateCube.canceled += instance.OnRotateCube;
                @SwitchToDriving.started += instance.OnSwitchToDriving;
                @SwitchToDriving.performed += instance.OnSwitchToDriving;
                @SwitchToDriving.canceled += instance.OnSwitchToDriving;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Driving
    private readonly InputActionMap m_Driving;
    private IDrivingActions m_DrivingActionsCallbackInterface;
    private readonly InputAction m_Driving_DrivingCar;
    private readonly InputAction m_Driving_SwitchToPlayer;
    public struct DrivingActions
    {
        private @PlayerInputActions m_Wrapper;
        public DrivingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DrivingCar => m_Wrapper.m_Driving_DrivingCar;
        public InputAction @SwitchToPlayer => m_Wrapper.m_Driving_SwitchToPlayer;
        public InputActionMap Get() { return m_Wrapper.m_Driving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivingActions set) { return set.Get(); }
        public void SetCallbacks(IDrivingActions instance)
        {
            if (m_Wrapper.m_DrivingActionsCallbackInterface != null)
            {
                @DrivingCar.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDrivingCar;
                @DrivingCar.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDrivingCar;
                @DrivingCar.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDrivingCar;
                @SwitchToPlayer.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnSwitchToPlayer;
                @SwitchToPlayer.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnSwitchToPlayer;
                @SwitchToPlayer.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnSwitchToPlayer;
            }
            m_Wrapper.m_DrivingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DrivingCar.started += instance.OnDrivingCar;
                @DrivingCar.performed += instance.OnDrivingCar;
                @DrivingCar.canceled += instance.OnDrivingCar;
                @SwitchToPlayer.started += instance.OnSwitchToPlayer;
                @SwitchToPlayer.performed += instance.OnSwitchToPlayer;
                @SwitchToPlayer.canceled += instance.OnSwitchToPlayer;
            }
        }
    }
    public DrivingActions @Driving => new DrivingActions(this);
    public interface IPlayerActions
    {
        void OnChangeCubeColor(InputAction.CallbackContext context);
        void OnRotateCube(InputAction.CallbackContext context);
        void OnSwitchToDriving(InputAction.CallbackContext context);
    }
    public interface IDrivingActions
    {
        void OnDrivingCar(InputAction.CallbackContext context);
        void OnSwitchToPlayer(InputAction.CallbackContext context);
    }
}
